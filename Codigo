#include <elapsedMillis.h>
#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <Stepper.h>

// Pino do sensor LDR
#define LDR_PIN A0 // Pino analógico no ESP8266 (A0)

// Configuração do motor de passo
#define STEPS_PER_REV 2048 // Passos por revolução (ULN2003)
#define IN1 D1             // Pinos de controle do motor
#define IN2 D2
#define IN3 D3
#define IN4 D4
Stepper stepper(STEPS_PER_REV, IN1, IN3, IN2, IN4);

// Variáveis globais
int lightIntensity = 0;
unsigned long lightExposureStart = 0;
unsigned long totalLightTime = 0;
const unsigned int interval = 2000; // Intervalo para publicação MQTT (2 segundos)

// Credenciais para conexão Wi-Fi
const char* ssid = "NOS-C776";
const char* password = "MKT3EH2G";

// Dados do servidor MQTT
const char* mqtt_server = "broker.hivemq.com"; // Servidor público HiveMQ
const char* topic_luminosity = "iotfrontier/luz";
const char* topic_light_time = "iotfrontier/tempoutil";

WiFiClient espClient;
PubSubClient client(espClient);

// Variável para controle de tempo
elapsedMillis timeElapsed;

// Variáveis do motor de passo
const int smallStep = 200; // Número de passos para girar (ajuste conforme necessário)
bool motorReturning = false; // Indica se o motor está voltando à posição original

void setupwifi() {
  WiFi.begin(ssid, password);
  Serial.print("Conectando ao Wi-Fi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nConectado ao Wi-Fi!");
  Serial.print("Endereço IP: ");
  Serial.println(WiFi.localIP());
}

// Função para reconectar ao servidor MQTT
void reconnect() {
  while (!client.connected()) {
    Serial.print("Tentando conectar ao MQTT...");
    String clientId = "ESP8266Client-";
    clientId += String(random(0xffff), HEX);
    if (client.connect(clientId.c_str())) {
      Serial.println("Conectado ao MQTT!");
      client.publish("iotfrontier/mqtt", "iotfrontier");
      client.subscribe("iotfrontier/mqtt");
    } else {
      Serial.print("Falha ao conectar. Código de erro: ");
      Serial.println(client.state());
      delay(5000); // Espera 5 segundos antes de tentar novamente
    }
  }
}

void setup() {
  Serial.begin(115200);

  // Configuração Wi-Fi
  setupwifi();

  // Configuração do servidor MQTT
  client.setServer(mqtt_server, 1883);

  // Configuração do motor de passo
  stepper.setSpeed(10); // Velocidade do motor em RPM (ajuste conforme necessário)
}

void loop() {
  // Verifica e reconecta ao MQTT se necessário
  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  // Leitura do LDR e envio ao MQTT a cada 2 segundos
  if (timeElapsed >= interval) {
    timeElapsed = 0;

    // Lê a luminosidade do LDR
    lightIntensity = analogRead(LDR_PIN);
    Serial.print("Luminosidade: ");
    Serial.println(lightIntensity);

    // Verifica se o LDR está em baixa luminosidade (abaixo de 800)
    if (lightIntensity < 800) { 
      if (lightExposureStart == 0) {
        lightExposureStart = millis(); // Marca o início do tempo útil
      } else {
        totalLightTime += millis() - lightExposureStart; // Acumula o tempo útil
        lightExposureStart = millis(); // Reinicia o tempo de início
      }
    } else {
      lightExposureStart = 0; // Reseta o tempo de início quando a luz está acima de 800
    }

    // Calcula tempo útil de exposição à luz
    unsigned long usefulLightTime = totalLightTime / 1000; // Converte para segundos

    // Publica os dados no servidor MQTT
    client.publish(topic_luminosity, String(lightIntensity).c_str());
    client.publish(topic_light_time, String(usefulLightTime).c_str());

    Serial.println("Dados enviados ao MQTT:");
    Serial.println(" - Luminosidade: " + String(lightIntensity));
    Serial.println(" - Tempo útil de luz: " + String(usefulLightTime) + " segundos");
  }

  // Controle do motor de passo
  if (!motorReturning) {
    stepper.step(smallStep); // Gira o motor um pequeno ângulo
    delay(500); // Pequena pausa para simular a ação
    motorReturning = true; // Indica que o motor deve retornar
  } else {
    stepper.step(-smallStep); // Retorna o motor à posição original
    delay(500); // Pequena pausa
    motorReturning = false; // Pronto para o próximo ciclo
  }
}
